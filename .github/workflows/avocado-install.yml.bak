name: Build Extensions Matrix with Avocado CLI

on:
  pull_request:
    branches: ['*']
  workflow_dispatch:

env:
  RELEASE: "latest/apollo/edge"

jobs:
  generate-matrix:
    runs-on: avocado-sdk
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      avocado_version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest avocado-cli release
      id: get-version
      run: |
        # Install jq if not available
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi

        LATEST_RELEASE=$(curl -s https://api.github.com/repos/avocado-linux/avocado-cli/releases/latest | jq -r '.tag_name')

        if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
          echo "Failed to get latest release version"
          exit 1
        fi

        echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        echo "Latest avocado-cli version: $LATEST_RELEASE"

    - name: Generate build matrix
      id: set-matrix
      run: |
        # Define all possible targets
        ALL_TARGETS=("qemux86-64" "qemuarm64" "raspberrypi4" "raspberrypi5" "reterminal" "reterminal-dm")

        # Initialize matrix array
        matrix_includes=()

        # Process each extension directory
        for ext_dir in extensions/*/; do
          if [ -d "$ext_dir" ] && [ -f "$ext_dir/avocado.toml" ]; then
            extension=$(basename "$ext_dir")
            echo "Processing extension: $extension"

            # Read supported_targets from avocado.toml
            supported_targets=$(grep '^supported_targets' "$ext_dir/avocado.toml" | sed 's/supported_targets = //' | tr -d '"' | tr -d "'" | tr -d ' ')
            echo "  supported_targets: $supported_targets"

            if [ "$supported_targets" = "*" ]; then
              # Build for all targets
              for target in "${ALL_TARGETS[@]}"; do
                matrix_includes+=("{\"extension\": \"$extension\", \"target\": \"$target\"}")
              done
            else
              # Parse the list of specific targets
              # Handle TOML array format: ["target1", "target2"]
              targets_list=$(echo "$supported_targets" | sed 's/\[//g' | sed 's/\]//g' | sed 's/"//g' | sed "s/'//g" | tr ',' '\n')

              for target in $targets_list; do
                target=$(echo "$target" | xargs) # trim whitespace
                if [ -n "$target" ]; then
                  matrix_includes+=("{\"extension\": \"$extension\", \"target\": \"$target\"}")
                fi
              done
            fi
          fi
        done

        # Create JSON matrix
        matrix_json="["
        for i in "${!matrix_includes[@]}"; do
          if [ $i -gt 0 ]; then
            matrix_json+=","
          fi
          matrix_json+="${matrix_includes[$i]}"
        done
        matrix_json+="]"

        echo "Generated matrix:"
        echo "$matrix_json" | jq '.'

        echo "matrix={\"include\":$matrix_json}" >> $GITHUB_OUTPUT

  build-extensions:
    needs: generate-matrix
    runs-on: avocado-sdk
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Download and install avocado-cli
      run: |
        VERSION="${{ needs.generate-matrix.outputs.avocado_version }}"
        echo "Installing avocado-cli version: $VERSION"

        # Determine architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          BINARY_ARCH="x86_64-unknown-linux-gnu"
        elif [ "$ARCH" = "aarch64" ]; then
          BINARY_ARCH="aarch64-unknown-linux-musl"
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi

        echo "Detected architecture: $ARCH, using binary: $BINARY_ARCH"

        # Download the precompiled binary
        BINARY_NAME="avocado-${VERSION}_${BINARY_ARCH}.tar.gz"
        echo "Downloading: $BINARY_NAME"

        if ! curl -L -o "$BINARY_NAME" "https://github.com/avocado-linux/avocado-cli/releases/download/${VERSION}/${BINARY_NAME}"; then
          echo "Failed to download $BINARY_NAME"
          exit 1
        fi

        # Extract and install
        if ! tar -xzf "$BINARY_NAME"; then
          echo "Failed to extract $BINARY_NAME"
          exit 1
        fi

        if [ ! -f "avocado" ]; then
          echo "avocado binary not found after extraction"
          ls -la
          exit 1
        fi

        sudo cp avocado /usr/local/bin/

        # Verify installation
        avocado --version

    - name: Build extension for target
      run: |
        cd extensions/${{ matrix.extension }}
        echo "Building extension: ${{ matrix.extension }} for target: ${{ matrix.target }}"

        # Configure avocado to use the nginx container
        export AVOCADO_PKG_REPO_URL="http://localhost:8080"

        echo "Running avocado install -f..."
        avocado ext install -e avocado-ext-"${{ matrix.extension }}" -f --target "${{ matrix.target }}"
        avocado ext build -e avocado-ext-"${{ matrix.extension }}" --target "${{ matrix.target }}"
        avocado ext package -e avocado-ext-"${{ matrix.extension }}" --target "${{ matrix.target }}" --out-dir "${{ matrix.extension }}-${{ matrix.target }}"
        avocado clean

    - name: Copy package to cache directory
      run: |
        # Create the cache directory structure
        CACHE_DIR="/home/runner/_cache/repos/packages/${{ env.RELEASE }}/target/${{ matrix.target }}-ext"
        mkdir -p "$CACHE_DIR"

        # Find and copy the built RPM package
        RPM_FILE=$(find . -name "avocado-ext-${{ matrix.extension }}-*.rpm" -type f | head -1)
        if [ -z "$RPM_FILE" ]; then
          echo "Error: No RPM file found matching pattern avocado-ext-${{ matrix.extension }}-*.rpm"
          ls -la
          exit 1
        fi

        echo "Found RPM file: $RPM_FILE"
        echo "Copying package to $CACHE_DIR"
        cp "$RPM_FILE" "$CACHE_DIR/"

        echo "Package copied successfully to cache directory"
        ls -la "$CACHE_DIR"
