name: Edge Build and Deploy

on:
  schedule:
    - cron: "0 9 * * *" # Runs at 9 AM UTC daily
  workflow_dispatch:
    inputs:
      build_all:
        description: "Build all machines and perform all tasks"
        type: boolean
        default: false
      target_to_build:
        description: "Select the machine to build"
        type: choice
        required: true
        options:
          # Machines
          - imx8mp-evk
          - imx91-frdm
          - imx93-frdm
          - imx93-evk
          - qemuarm64
          - qemux86-64
          - reterminal
          - reterminal-dm
          - jetson-orin-nano-devkit-nvme
          - raspberrypi4
          - raspberrypi5
      distro_codename:
        description: "Distribution codename"
        type: string
        default: "latest/apollo/edge"

jobs:
  determine_build_matrix:
    runs-on: avocado-build
    env:
      DISTRO_VERSION: "0.1.0"
      DISTRO_CODENAME: ${{ github.event.inputs.distro_codename || 'latest/apollo/edge' }}
      AVOCADO_REPO_BASE: "https://repo.avocadolinux.org"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      release_date: ${{ steps.set-paths.outputs.release_date }}
      staging_base_path: ${{ steps.set-paths.outputs.staging_base_path }}
      packages_path: ${{ steps.set-paths.outputs.packages_path }}
      releases_path: ${{ steps.set-paths.outputs.releases_path }}
      distro_codename: ${{ steps.set-paths.outputs.distro_codename }}
    steps:
      - name: Set build paths
        id: set-paths
        run: |
          # Generate timestamp for this build
          RELEASE_DATE=$(date -u '+%Y-%m-%d-%H%M%S')
          REPO_PATH="/home/runner/_cache/repos"
          DISTRO_CODENAME="${{ env.DISTRO_CODENAME }}"

          # New directory structure with proper scoping
          STAGING_BASE_PATH="${REPO_PATH}/staging/${RELEASE_DATE}"
          PACKAGES_PATH="${REPO_PATH}/packages/${DISTRO_CODENAME}"
          RELEASES_PATH="${REPO_PATH}/releases/${DISTRO_CODENAME}/${RELEASE_DATE}"

          echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "staging_base_path=$STAGING_BASE_PATH" >> $GITHUB_OUTPUT
          echo "packages_path=$PACKAGES_PATH" >> $GITHUB_OUTPUT
          echo "releases_path=$RELEASES_PATH" >> $GITHUB_OUTPUT
          echo "distro_codename=$DISTRO_CODENAME" >> $GITHUB_OUTPUT

          echo "Generated release date: $RELEASE_DATE"
          echo "Staging base path: $STAGING_BASE_PATH"
          echo "Packages path: $PACKAGES_PATH"
          echo "Releases path: $RELEASES_PATH"

      - name: Determine build parameters
        id: set-matrix
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const allMachinesList = [
              "imx8mp-evk", "imx91-frdm", "imx93-frdm", "qemuarm64", "qemux86-64",
              "reterminal", "reterminal-dm", "imx93-evk", "jetson-orin-nano-devkit-nvme",
              "raspberrypi4", "raspberrypi5"
            ];

            let selectedMachines = [];

            if (context.eventName === 'schedule') {
              selectedMachines = allMachinesList;
              core.info('Scheduled run: Selecting all machines.');
            } else if (context.eventName === 'workflow_dispatch') {
              const buildAll = context.payload.inputs.build_all === true || context.payload.inputs.build_all === 'true';

              if (buildAll) {
                selectedMachines = allMachinesList;
                core.info('Build all selected: Building all machines.');
              } else {
                const target = context.payload.inputs.target_to_build;
                core.info(`Dispatch input target_to_build: ${target}`);

                if (allMachinesList.includes(target)) {
                  selectedMachines = [target];
                  core.info(`Selected machine for dispatch: ${target}`);
                } else {
                  core.warning(`Unknown target selected: ${target}. No machine will be built.`);
                }
              }
            } else {
              core.setFailed(`Unsupported event: ${context.eventName}`);
              return;
            }
            core.setOutput('matrix', JSON.stringify(selectedMachines));

  build:
    needs: determine_build_matrix
    if: needs.determine_build_matrix.outputs.matrix != '[]'
    runs-on: avocado-build
    strategy:
      fail-fast: false
      matrix:
        machine: ${{ fromJSON(needs.determine_build_matrix.outputs.matrix) }}
        build_config:
          - target: avocado-distro
            sdk_machine: x86_64
          - target: avocado-sdk
            sdk_machine: x86_64
          - target: avocado-sdk
            sdk_machine: aarch64
    env:
      STAGING_BASE_PATH: ${{ needs.determine_build_matrix.outputs.staging_base_path }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create staging directory for this build
        run: |
          if [ "${{ matrix.build_config.target }}" = "avocado-distro" ]; then
            STAGING_PATH="${{ env.STAGING_BASE_PATH }}/avocado-distro/${{ matrix.machine }}"
          else
            STAGING_PATH="${{ env.STAGING_BASE_PATH }}/avocado-sdk/${{ matrix.build_config.sdk_machine }}/${{ matrix.machine }}"
          fi
          mkdir -p "$STAGING_PATH"
          echo "STAGING_PATH=$STAGING_PATH" >> $GITHUB_ENV

      - name: Build ${{ matrix.build_config.target }} for ${{ matrix.machine }}
        env:
          AVOCADO_REPO_BASE: "https://repo.avocadolinux.org"
          BB_GIT_SHALLOW: "1"
          PARALLEL_MAKE: "-j16"
          SDKMACHINE: ${{ matrix.build_config.sdk_machine }}
          DISTRO_CODENAME: ${{ needs.determine_build_matrix.outputs.distro_codename }}
        run: |
          echo "TARGET: ${{ matrix.build_config.target }}"
          echo "SDKMACHINE: ${{ matrix.build_config.sdk_machine }}"
          echo "DISTRO_CODENAME: ${{ needs.determine_build_matrix.outputs.distro_codename }}"

          cd distro
          source ./scripts/init-build kas/machine/${{ matrix.machine }}.yml
          PARALLEL_MAKE_ERLANG="-j16" kas build kas/machine/${{ matrix.machine }}.yml --target ${{ matrix.build_config.target }}

      - name: Stage target repos for ${{ matrix.machine }}
        run: |
          echo "Staging repos for ${{ matrix.machine }} to ${{ env.STAGING_PATH }}"
          ls ./distro/build-${{ matrix.machine }}/build/tmp/deploy/rpm
          cd distro
          ./scripts/repo-stage-rpms.sh ./build-${{ matrix.machine }}/build/tmp/deploy/rpm ${{ env.STAGING_PATH }} ${{ needs.determine_build_matrix.outputs.distro_codename }}

  aggregate_packages:
    needs:
      - determine_build_matrix
      - build
    if: needs.build.result == 'success'
    runs-on: avocado-build
    env:
      STAGING_BASE_PATH: ${{ needs.determine_build_matrix.outputs.staging_base_path }}
      PACKAGES_PATH: ${{ needs.determine_build_matrix.outputs.packages_path }}
      DISTRO_CODENAME: ${{ needs.determine_build_matrix.outputs.distro_codename }}
    steps:
      # - name: Checkout repo
      #   uses: actions/checkout@v4

      - name: Create packages directory
        run: mkdir -p ${{ env.PACKAGES_PATH }}

      - name: Aggregate packages from staging to packages directory
        run: |
          echo "Aggregating packages from staging to packages directory"
          echo "From: ${{ env.STAGING_BASE_PATH }}"
          echo "To: ${{ env.PACKAGES_PATH }}"

          # Aggregate avocado-distro packages
          DISTRO_CODENAME="${{ env.STAGING_BASE_PATH }}/avocado-distro"
          if [ -d "$DISTRO_CODENAME" ]; then
            echo "Aggregating avocado-distro packages"
            # Iterate through each machine directory
            for machine_dir in "$DISTRO_CODENAME"/*; do
              if [ -d "$machine_dir" ]; then
                machine_name=$(basename "$machine_dir")
                echo "Processing machine: $machine_name"
                # Copy contents from the distro-specific subdirectory to avoid double nesting
                DISTRO_SOURCE="$machine_dir/${{ env.DISTRO_CODENAME }}"
                if [ -d "$DISTRO_SOURCE" ]; then
                  rsync -av "$DISTRO_SOURCE/" "${{ env.PACKAGES_PATH }}/"
                else
                  echo "Warning: Expected distro path $DISTRO_SOURCE not found"
                fi
              fi
            done
          fi

          # Aggregate avocado-sdk packages for both architectures
          for sdk_arch in x86_64 aarch64; do
            SDK_ARCH_PATH="${{ env.STAGING_BASE_PATH }}/avocado-sdk/$sdk_arch"
            if [ -d "$SDK_ARCH_PATH" ]; then
              echo "Aggregating avocado-sdk packages for $sdk_arch"
              # Iterate through each machine directory
              for machine_dir in "$SDK_ARCH_PATH"/*; do
                if [ -d "$machine_dir" ]; then
                  machine_name=$(basename "$machine_dir")
                  echo "Processing machine: $machine_name"
                  # Copy contents from the distro-specific subdirectory to avoid double nesting
                  DISTRO_SOURCE="$machine_dir/${{ env.DISTRO_CODENAME }}"
                  if [ -d "$DISTRO_SOURCE" ]; then
                    rsync -av "$DISTRO_SOURCE/" "${{ env.PACKAGES_PATH }}/"
                  else
                    echo "Warning: Expected distro path $DISTRO_SOURCE not found"
                  fi
                fi
              done
            fi
          done

          echo "Package aggregation complete"

  cleanup_packages:
    needs:
      - determine_build_matrix
      - build
      - aggregate_packages
    if: needs.build.result == 'success'
    runs-on: avocado-build
    env:
      PACKAGES_PATH: ${{ needs.determine_build_matrix.outputs.packages_path }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make cleanup script executable
        run: |
          cd distro
          chmod +x ./scripts/repo-purge-window.sh

      - name: Run cleanup script on packages directory
        run: |
          echo "Running cleanup script on ${{ env.PACKAGES_PATH }}"
          cd distro
          ./scripts/repo-purge-window.sh "${{ env.PACKAGES_PATH }}"

  create_release_metadata:
    needs:
      - determine_build_matrix
      - build
      - cleanup_packages
    if: needs.build.result == 'success'
    runs-on: avocado-build
    env:
      PACKAGES_PATH: ${{ needs.determine_build_matrix.outputs.packages_path }}
      RELEASES_PATH: ${{ needs.determine_build_matrix.outputs.releases_path }}
      DISTRO_CODENAME: ${{ needs.determine_build_matrix.outputs.distro_codename }}
      AVOCADO_REPO_BASE: "https://repo.avocadolinux.org"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create releases directory
        run: mkdir -p ${{ env.RELEASES_PATH }}

      - name: Generate repository metadata directly in releases directory
        run: |
          echo "Generating repository metadata directly in releases directory"
          echo "Reading packages from: ${{ env.PACKAGES_PATH }}"
          echo "Writing metadata to: ${{ env.RELEASES_PATH }}"
          echo "Metadata will reference packages at: ${{ env.AVOCADO_REPO_BASE }}/packages/${{ env.DISTRO_CODENAME }}"
          cd distro
          ./scripts/repo-update-metadata.sh "${{ env.PACKAGES_PATH }}" "${{ env.AVOCADO_REPO_BASE }}/packages/${{ env.DISTRO_CODENAME }}" "${{ env.RELEASES_PATH }}"

  sync_to_s3:
    needs:
      [determine_build_matrix, build, cleanup_packages, create_release_metadata]
    if: needs.build.result == 'success'
    runs-on: avocado-build
    env:
      PACKAGES_PATH: ${{ needs.determine_build_matrix.outputs.packages_path }}
      RELEASES_PATH: ${{ needs.determine_build_matrix.outputs.releases_path }}
      DISTRO_CODENAME: ${{ needs.determine_build_matrix.outputs.distro_codename }}
      RELEASE_DATE: ${{ needs.determine_build_matrix.outputs.release_date }}
      S3_BUCKET_PATH: ${{ secrets.AWS_S3_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync packages directory to S3
        run: |
          echo "Syncing packages from ${{ env.PACKAGES_PATH }} to s3://${{ env.S3_BUCKET_PATH }}/packages/${{ env.DISTRO_CODENAME }}"
          aws s3 sync "${{ env.PACKAGES_PATH }}" "s3://${{ env.S3_BUCKET_PATH }}/packages/${{ env.DISTRO_CODENAME }}"

      - name: Sync release metadata to S3
        run: |
          echo "Syncing release metadata from ${{ env.RELEASES_PATH }} to s3://${{ env.S3_BUCKET_PATH }}/releases/${{ env.DISTRO_CODENAME }}/${{ env.RELEASE_DATE }}"
          aws s3 sync "${{ env.RELEASES_PATH }}" "s3://${{ env.S3_BUCKET_PATH }}/releases/${{ env.DISTRO_CODENAME }}/${{ env.RELEASE_DATE }}"
          echo "Release metadata S3 sync complete."

      - name: Sync metadata to S3
        run: |
          # First sync everything EXCEPT repomd.xml files. Then sync ONLY repomd.xml files. This
          # ensures that if a new repomd.xml is served, that the content it addresses exists.
          aws s3 sync "${{ env.RELEASES_PATH }}" "s3://${{ env.S3_BUCKET_PATH }}/${{ env.DISTRO_CODENAME }}" --exclude "*/repomd.xml"
          aws s3 sync "${{ env.RELEASES_PATH }}" "s3://${{ env.S3_BUCKET_PATH }}/${{ env.DISTRO_CODENAME }}" --exclude "*" --include "*/repomd.xml"

      - name: Clean up staging, releases, and latest directories
        run: |
          echo "Cleaning up staging, releases, and latest directories"

          echo "Cleaning up staging directory: ${{ needs.determine_build_matrix.outputs.staging_base_path }}"
          if [ -d "${{ needs.determine_build_matrix.outputs.staging_base_path }}" ]; then
            rm -rf "${{ needs.determine_build_matrix.outputs.staging_base_path }}"
            echo "Staging directory cleaned up successfully."
          fi
